#!/usr/bin/env python3

# adderall
description = """
cycles through unstaged and untracked files in your git repository and will
ask you whether you'd like to track the file, optionally allowing you to
view the diff (if applicable) or edit the file.
"""

import subprocess, argparse

def simple_cmd_check(args, err_msg, fatal_error=True, stdout=None, stderr=None):
    try:
        subprocess.run(
                args,
                stderr=stderr,
                stdout=stdout).check_returncode()
        return True
    except:
        print(f"ERROR: {err_msg}")
        if fatal_error: exit(1)
        else: return False

def simple_silent_cmd_check(args, err_msg, fatal_error=True):
    return simple_cmd_check(
        args,
        err_msg,
        fatal_error=fatal_error,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.STDOUT)

simple_silent_cmd_check(
        ["which", "git"],
        "git isn't installed you goose")
simple_silent_cmd_check(
        ["git", "rev-parse", "--is-inside-work-tree"],
        "you're not in a git repository you goose")

editor = "nvim" # just because it's what i use

def main():
    global editor
    args = init_args()
    if args.editor:
        simple_silent_cmd_check(
                ["which", args.editor],
                f"'{args.editor}' was not found")
        editor = args.editor

    print("finding unstaged and untracked files...")
    unstaged = subprocess.run(
            ["git", "ls-files", "-m"],
            capture_output=True).stdout.decode("utf-8").splitlines(keepends=False)
    untracked = subprocess.run(
            ["git", "ls-files", "-o", "--exclude-standard"],
            capture_output=True).stdout.decode("utf-8").splitlines(keepends=False)

    # now we go through all the files
    if len(unstaged) > 0:
        print("==== unstaged files ====")
        for f in unstaged:
            file_action(f, {
                "add": action_add,
                "skip": action_skip,
                "edit": action_edit,
                "view diff": action_view_diff
            })

    if (len(untracked)) > 0:
        print("==== untracked files ====")
        for f in untracked:
            file_action(f, {
                "add": action_add,
                "skip": action_skip,
                "edit": action_edit
            })

    print("done! have a nice day :)")

def init_args():
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument("-e", "--editor", help=f"set the editor to use. default is '{editor}'")

    return parser.parse_args()

def file_action(file_path, actions):
    action_string = "would you like to:\n"
    for a in actions:
        action_string += f"  - {a}\n"

    done = False
    while not done:
        print(f"- {file_path}")
        print(action_string)
        choice = input("> ").lower()

        global chosen_action
        chosen_action = ""
        for a in actions:
            if a.startswith(choice):
                chosen_action = a

        if chosen_action == "":
            print("invalid action")
            continue

        done = actions[chosen_action](file_path)

# action_* functions hold actions that we can perform on a per file
# basis. they all must take a file path as an argument and return a
# bool. note that the bool is used to check if the user should be
# asked to perform an action again on the same file (True == continue,
# False == ask again)

def action_add(file_path):
    return simple_silent_cmd_check(
                ["git", "add", file_path],
                f"failed to add file '{file_path}'",
                fatal_error=False)

def action_skip(_):
    return True

def action_edit(file_path):
    global editor
    simple_cmd_check(
        [editor, file_path],
        f"failed to open file '{file_path}' with '{editor}'",
        fatal_error=False)
    return False

def action_view_diff(file_path):
    simple_cmd_check(
        ["git", "diff", file_path],
        "failed to view diff of '{file_path}'")
    return False

if __name__ == "__main__": main()

